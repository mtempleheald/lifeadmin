@using LifeAdmin.ComponentModels
@implements IDisposable
@inject StateContainer StateContainer

@code {
    [Parameter]
    public required InputComponentModel Model { get; set; }

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

    private void Save(ChangeEventArgs args)
    {
        StateContainer.SaveState(new() {
            Key = Model.Key!,
            Value = args.Value
        });
    }

    private bool ShouldDisplay { 
        get {
            if (Model.DisplayConditions is null || Model.DisplayConditions.Count == 0)
                return true; // unconditional, just show it
            var display = false;
            foreach (var condition in Model.DisplayConditions) {
                // TODO: Dynamically access value from shared state
                //       & return true if any are free
                display = true;
            }
            return display;
        } 
    }
}

<div class="input">

@if("TODO" != "Calculate whether to display myself based on the values of my siblings") {

    <label for="@Model.Key">
        @Model.Label
    </label>
    <input name="@Model.Key"
        id="@Model.Key"
        type="@Model.SubType"
        placeholder="@Model.Placeholder"
        value="@Model.Value"
        required="@Model.Required"
        @onchange="Save"
    />
    <details>
        <summary>Help</summary>
        @Model.HelpText
    </details>
}

<details>
    <summary>State available to this component</summary>
    <ul>
    @foreach (var s in StateContainer.State ?? []) {

        <li>@s.Key = @s.Value</li>
    }
    </ul>
</details>

</div>
